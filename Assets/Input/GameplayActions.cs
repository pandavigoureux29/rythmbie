//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/GameplayActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayActions"",
    ""maps"": [
        {
            ""name"": ""BattleController"",
            ""id"": ""0f6c0c19-41e0-48bd-b5a1-a83887e66d87"",
            ""actions"": [
                {
                    ""name"": ""LeftTap"",
                    ""type"": ""Button"",
                    ""id"": ""62769db2-bc47-4cf5-8048-8a119dd78b7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTap"",
                    ""type"": ""Button"",
                    ""id"": ""1985858f-62a8-4f3f-ba55-e09119dee557"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3f9dab5-7267-42e5-a3d6-47ba7dfd1a15"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d72c1a12-ea04-403c-83ae-fd744aeded91"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76ec561e-0136-455c-b924-e7e61c3fca19"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93895be8-8ccb-4e1b-86de-2fd3049ab022"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BattleTouch"",
            ""id"": ""f6d2b3d0-abb0-4f2c-8e2b-e6424a243894"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Value"",
                    ""id"": ""f8298ad0-de50-40e7-b73d-ddd6b95d8cdb"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e77e634b-1103-426a-ac2f-0fc4fa90e76e"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BattleController
        m_BattleController = asset.FindActionMap("BattleController", throwIfNotFound: true);
        m_BattleController_LeftTap = m_BattleController.FindAction("LeftTap", throwIfNotFound: true);
        m_BattleController_RightTap = m_BattleController.FindAction("RightTap", throwIfNotFound: true);
        // BattleTouch
        m_BattleTouch = asset.FindActionMap("BattleTouch", throwIfNotFound: true);
        m_BattleTouch_Press = m_BattleTouch.FindAction("Press", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleController
    private readonly InputActionMap m_BattleController;
    private List<IBattleControllerActions> m_BattleControllerActionsCallbackInterfaces = new List<IBattleControllerActions>();
    private readonly InputAction m_BattleController_LeftTap;
    private readonly InputAction m_BattleController_RightTap;
    public struct BattleControllerActions
    {
        private @GameplayActions m_Wrapper;
        public BattleControllerActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTap => m_Wrapper.m_BattleController_LeftTap;
        public InputAction @RightTap => m_Wrapper.m_BattleController_RightTap;
        public InputActionMap Get() { return m_Wrapper.m_BattleController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleControllerActions set) { return set.Get(); }
        public void AddCallbacks(IBattleControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleControllerActionsCallbackInterfaces.Add(instance);
            @LeftTap.started += instance.OnLeftTap;
            @LeftTap.performed += instance.OnLeftTap;
            @LeftTap.canceled += instance.OnLeftTap;
            @RightTap.started += instance.OnRightTap;
            @RightTap.performed += instance.OnRightTap;
            @RightTap.canceled += instance.OnRightTap;
        }

        private void UnregisterCallbacks(IBattleControllerActions instance)
        {
            @LeftTap.started -= instance.OnLeftTap;
            @LeftTap.performed -= instance.OnLeftTap;
            @LeftTap.canceled -= instance.OnLeftTap;
            @RightTap.started -= instance.OnRightTap;
            @RightTap.performed -= instance.OnRightTap;
            @RightTap.canceled -= instance.OnRightTap;
        }

        public void RemoveCallbacks(IBattleControllerActions instance)
        {
            if (m_Wrapper.m_BattleControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleControllerActions @BattleController => new BattleControllerActions(this);

    // BattleTouch
    private readonly InputActionMap m_BattleTouch;
    private List<IBattleTouchActions> m_BattleTouchActionsCallbackInterfaces = new List<IBattleTouchActions>();
    private readonly InputAction m_BattleTouch_Press;
    public struct BattleTouchActions
    {
        private @GameplayActions m_Wrapper;
        public BattleTouchActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_BattleTouch_Press;
        public InputActionMap Get() { return m_Wrapper.m_BattleTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleTouchActions set) { return set.Get(); }
        public void AddCallbacks(IBattleTouchActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleTouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleTouchActionsCallbackInterfaces.Add(instance);
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
        }

        private void UnregisterCallbacks(IBattleTouchActions instance)
        {
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
        }

        public void RemoveCallbacks(IBattleTouchActions instance)
        {
            if (m_Wrapper.m_BattleTouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleTouchActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleTouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleTouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleTouchActions @BattleTouch => new BattleTouchActions(this);
    public interface IBattleControllerActions
    {
        void OnLeftTap(InputAction.CallbackContext context);
        void OnRightTap(InputAction.CallbackContext context);
    }
    public interface IBattleTouchActions
    {
        void OnPress(InputAction.CallbackContext context);
    }
}
